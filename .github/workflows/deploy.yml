name: Deploy to PyPI

on:
  workflow_dispatch:  # You can also add 'release: published' if needed

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # for committing changes & creating releases

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          apt-get update && apt-get install -y jq
          python -m pip install --upgrade pip
          pip install build twine requests

      - name: Get current version from setup.py
        id: get_version
        run: |
          version=$(python setup.py --version)
          echo "PACKAGE_VERSION=$version" >> $GITHUB_ENV
          echo "Detected version: $version"

      - name: Get version from PyPI
        id: get_pypi_version
        run: |
          pkg=$(python setup.py --name)
          response=$(curl -s https://pypi.org/pypi/$pkg/json || echo "")
          if [ -z "$response" ]; then
            echo "PYPI_VERSION=none" >> $GITHUB_ENV
          else
            pypi_version=$(curl -s https://pypi.org/pypi/vaul/json | jq -r '.info.version')
            echo "PYPI_VERSION=$pypi_version" >> $GITHUB_ENV
          fi

      - name: Compare versions and patch if needed
        id: version_check
        run: |
          if [ "$PYPI_VERSION" = "none" ]; then
            echo "New package. No version conflict."
            exit 0
          fi

          if [ "$PACKAGE_VERSION" = "$PYPI_VERSION" ]; then
            echo "Versions are the same. Bumping patch version..."
            IFS='.' read -r major minor patch <<< "$PACKAGE_VERSION"
            new_patch=$((patch + 1))
            new_version="$major.$minor.$new_patch"
            sed -i "s/version=['\"]$PACKAGE_VERSION['\"]/version='$new_version'/" setup.py
            echo "Bumped version to $new_version"
            echo "PACKAGE_VERSION=$new_version" >> $GITHUB_ENV
          else
            dpkg --compare-versions "$PACKAGE_VERSION" gt "$PYPI_VERSION" && exit 0
            echo "‚ùå Version in setup.py ($PACKAGE_VERSION) is not newer than PyPI ($PYPI_VERSION)"
            exit 1
          fi

      - name: Commit and push version bump
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git commit -am "Bump version to $PACKAGE_VERSION"
          git push

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.PACKAGE_VERSION }}
          name: v${{ env.PACKAGE_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build package
        run: python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: python -m twine upload dist/*
